name: CMake

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y libgflags-dev libcurl4-openssl-dev libssl-dev libaio-dev libnl-3-dev libnl-genl-3-dev libzstd-dev
        sudo apt-get install -y uuid-dev libjson-c-dev libkmod-dev libsystemd-dev autoconf automake libtool libpci-dev nasm
        sudo apt-get install -y libext2fs-dev libyaml-cpp-dev build-essential cmake git pkg-config
        
        # Follow official OpenTelemetry dependency build order
        export MY_INSTALL_DIR=/usr/local
        export PKG_CONFIG_PATH=$MY_INSTALL_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
        
        # Step 1: Build and install Abseil (required by Protobuf 3.22+ and gRPC)
        git clone https://github.com/abseil/abseil-cpp.git
        cd abseil-cpp
        git checkout 20230802.1  # Compatible with gRPC v1.60.0
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
              -DCMAKE_CXX_STANDARD=17 \
              -DABSL_BUILD_TESTING=OFF \
              -DABSL_USE_GOOGLETEST_HEAD=OFF \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DABSL_ENABLE_INSTALL=ON \
              ..
        make -j$(nproc)
        sudo make install
        cd ../..
        
        # Step 2: Build and install Protobuf with Abseil integration
        git clone https://github.com/protocolbuffers/protobuf.git
        cd protobuf
        git checkout v25.1  # Compatible version
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
              -DCMAKE_CXX_STANDARD=17 \
              -Dprotobuf_BUILD_TESTS=OFF \
              -Dprotobuf_ABSL_PROVIDER=package \
              -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR \
              ..
        make -j$(nproc)
        sudo make install
        cd ../..
        
        # Step 3: Build and install gRPC with Abseil and Protobuf integration
        git clone --recurse-submodules -b v1.60.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
        cd grpc
        mkdir build && cd build
        cmake -DgRPC_INSTALL=ON \
              -DgRPC_BUILD_TESTS=OFF \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
              -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR \
              -DgRPC_ABSL_PROVIDER=package \
              -DgRPC_PROTOBUF_PROVIDER=package \
              -DgRPC_SSL_PROVIDER=package \
              ..
        make -j$(nproc)
        sudo make install
        cd ../..
        
        
        
        wget https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz
        tar -zxvf release-1.11.0.tar.gz
        cd googletest-release-1.11.0/
        cmake CMakeLists.txt
        make
        sudo make install
        cd ..
        wget https://github.com/open-telemetry/opentelemetry-cpp/archive/refs/tags/v1.14.2.tar.gz
        tar -zxvf v1.14.2.tar.gz
        cd opentelemetry-cpp-1.14.2/
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DWITH_OTLP_HTTP=ON \
              -DWITH_OTLP_GRPC=ON \
              -DBUILD_TESTING=OFF \
              -DOPENTELEMETRY_INSTALL=ON \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR \
              -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
              ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ../../..

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        git submodule update --init
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=1 -DENABLE_DSA=1 -DENABLE_ISAL=1 -DCMAKE_PREFIX_PATH=/usr/local

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: make -j64

    - name: E2E Test OverlayBD
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        sudo make install
        sudo cp ${{github.workspace}}/src/example_config/overlaybd-registryv2.json /etc/overlaybd/overlaybd.json
        sudo systemctl enable /opt/overlaybd/overlaybd-tcmu.service
        sudo systemctl start overlaybd-tcmu
        sudo systemctl status overlaybd-tcmu
        sudo mkdir -p /var/lib/overlaybd/test/
        sudo mkdir -p /sys/kernel/config/target/core/user_1/vol1
        echo -n dev_config=overlaybd/${{github.workspace}}/src/example_config/redis.obd.config.json | sudo tee /sys/kernel/config/target/core/user_1/vol1/control
        echo -n 1 | sudo tee /sys/kernel/config/target/core/user_1/vol1/enable
        sudo mkdir -p /sys/kernel/config/target/loopback/naa.123456789abcdef/tpgt_1/lun/lun_0
        echo -n "naa.123456789abcdef" | sudo tee /sys/kernel/config/target/loopback/naa.123456789abcdef/tpgt_1/nexus
        sudo ln -s /sys/kernel/config/target/core/user_1/vol1 /sys/kernel/config/target/loopback/naa.123456789abcdef/tpgt_1/lun/lun_0/vol1
        lsblk
        sudo apt-get install -y lsscsi
        dev=`lsscsi | grep TCMU | awk '{print $7}'`
        echo $dev
        mkdir obd_mp
        sudo mount -o ro $dev obd_mp
        ls obd_mp
        sudo umount obd_mp
        ls -l /sys/kernel/config/target/loopback/naa.123456789abcdef/tpgt_1/lun/lun_0/vol1
        sudo unlink /sys/kernel/config/target/loopback/naa.123456789abcdef/tpgt_1/lun/lun_0/vol1
        wget https://overlaybd.blob.core.windows.net/overlaybd/e2etest.tar.gz
        gzip -k -d e2etest.tar.gz
        mkdir test_data
        tar -zxvf e2etest.tar.gz -C test_data/
        truncate -s 2g img1
        truncate -s 2g img2
        /opt/overlaybd/bin/overlaybd-apply --mkfs --raw e2etest.tar img1
        sleep 2
        /opt/overlaybd/bin/overlaybd-apply --mkfs --raw e2etest.tar img2
        diff img1 img2
        sudo mount -o ro img1 obd_mp
        ls obd_mp
        sudo diff -r --exclude "lost+found" test_data obd_mp
        sudo umount obd_mp
    - name: E2E Test turboOCIv1
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        sudo make install
        sudo cp ${{github.workspace}}/src/example_config/overlaybd-registryv2.json /etc/overlaybd/overlaybd.json
        sudo systemctl enable /opt/overlaybd/overlaybd-tcmu.service
        sudo systemctl start overlaybd-tcmu
        sudo systemctl status overlaybd-tcmu
        sudo wget https://overlaybd.blob.core.windows.net/overlaybd/e2etest.tar.gz
        sudo mkdir -p /var/lib/overlaybd/test/
        sudo tar -zxvf e2etest.tar.gz -C /var/lib/overlaybd/test/
        sudo mkdir -p /sys/kernel/config/target/core/user_1/vol2
        echo -n dev_config=overlaybd//var/lib/overlaybd/test/20/block/config.v1.json | sudo tee /sys/kernel/config/target/core/user_1/vol2/control
        echo -n 1 | sudo tee /sys/kernel/config/target/core/user_1/vol2/enable
        sudo mkdir -p /sys/kernel/config/target/loopback/naa.987654321abcdef/tpgt_1/lun/lun_0
        echo -n "naa.987654321abcdef" | sudo tee /sys/kernel/config/target/loopback/naa.987654321abcdef/tpgt_1/nexus
        sudo ln -s /sys/kernel/config/target/core/user_1/vol2 /sys/kernel/config/target/loopback/naa.987654321abcdef/tpgt_1/lun/lun_0/vol2
        lsblk
        sudo apt-get install -y lsscsi
        dev=`lsscsi | grep TCMU | awk '{print $7}'`
        echo $dev
        sudo mkdir foci_mp
        sudo mount -o ro $dev foci_mp
        ls foci_mp
        sudo umount foci_mp
        sudo unlink /sys/kernel/config/target/loopback/naa.987654321abcdef/tpgt_1/lun/lun_0/vol2
    - name: Unit Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest -j8 --output-on-failure -C $BUILD_TYPE
